@using MudBlazor.ThemeManager.TestApp.MudThemePresets
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode"
                  @ref="@_mudThemeProvider"
                  Theme="_themeManager.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation" >
        <MudIconButton Color="Color.Inherit"
                       Edge="Edge.Start"
                       Icon="@Icons.Material.Filled.Menu"
                       OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Color="Color.Inherit"
                       Edge="Edge.End"
                       Icon="@Icons.Material.Filled.DarkMode"
                       OnClick="@((e) => DarkModeToggle())" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen"
               ClipMode="_themeManager.DrawerClipMode"
               Elevation="_themeManager.DrawerElevation" >
        <MudText Class="px-4 pt-2"
                 Typo="Typo.h6" >
            Theme Manager
        </MudText>
        <MudText Class="px-4 mud-text-secondary"
                 Typo="Typo.body2" >
            Test Application
        </MudText>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-16 px-16"
                      MaxWidth="MaxWidth.False" >
            @Body
        </MudContainer>
    </MudMainContent>
    <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager IsDarkMode="@_isDarkMode"
                     Open="_themeManagerOpen"
                     OpenChanged="OpenThemeManager"
                     Theme="_themeManager"
                     ThemeChanged="UpdateTheme"
                     ThemePresets="_themePresets" />
</MudLayout>

@code {
    private ThemeManagerTheme _themeManager = new();
    private MudThemeProvider _mudThemeProvider;
    private IEnumerable<IThemePreset>? _themePresets;

    private bool _isDarkMode;
    private bool _drawerOpen = true;
    private bool _themeManagerOpen;


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    private void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }


    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }


    private void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    protected override void OnInitialized()
    {
        _themePresets = [new CustomThemePreset01(), new CustomThemePreset02()];
    }
}